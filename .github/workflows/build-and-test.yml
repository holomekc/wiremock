# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build and Test

on:
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        jdk: [ 17 ]
    runs-on: ${{ matrix.os }}
    env:
      JDK_VERSION: ${{ matrix.jdk }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          validate-wrappers: true
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      #    - name: Cache SonarCloud packages
      #      uses: actions/cache@v1
      #      with:
      #        path: ~/.sonar/cache
      #        key: ${{ runner.os }}-sonar
      #        restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      #    - name: Test WireMock with Sonarqube
      #      if: ${{ matrix.os == 'ubuntu-latest' && matrix.jdk == 11 && github.event_name == 'push' }}
      #      env:
      #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #      run: ./gradlew check sonarqube --stacktrace --no-daemon

      - name: Test WireMock
        if: ${{ !(matrix.os == 'ubuntu-latest' && matrix.jdk == 17 && github.event_name == 'push') }}
        run: ./gradlew :check --stacktrace --no-daemon
